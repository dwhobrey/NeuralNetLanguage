/* NeSeL v1.0 April 1989 */
/* BAM neural net: pure C version */
/* Compile with nsl1 options -aqhy  */
pragma header 0
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <malloc.h>
#include <stdarg.h>
#include <math.h>

#include "nsltype.h"
#include "nslstd.h"
#include "nslios.h"
#include "nslwsio.h"

/*#include "bam.h"*/
pragma header -1

/* Parameters for 2x64 field bam net */
#define NUM_PAS 16 /* number of partitions */
#define NUM_NOS 4 /* number of nodes per partition */
#define NUM_FLD (NUM_PAS*NUM_NOS) /* field size */
#define NET_DIM 12 /* approx 1+sqrt(2*NUM_FLD) */
/* NOTE PATS & pats must contain the same patterns */
#define PATS "(float)[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\
                      1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\
                      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
                      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
                      1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,\
                      1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,\
                      0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,\
                      0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1],\
              (float)[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,\
                      0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,\
                      1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,\
                      1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,\
                      1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,\
                      1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,\
                      1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,\
                      1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]"
int patsa[][NUM_FLD]=
  {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   },
   {0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
    0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
    1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
    1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0
   }};
int patsb[][NUM_FLD]=
  {{1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,
    1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,
    0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,
    0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1
   },
   {1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
    1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
    1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
    1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0
   }};

int num_pats=2;
int base_len=0,
    base_age=6, /* num of cycles outputs must remain stable to settle */
    base_flush=NET_DIM, /* num cycles between pats to flush comms */
    base_stoch=0, /* when nonzero enables stochastic convergence */
    base_nocomms=0; /* when nonzero disables comms */
long base_cycles=120; /* num cycles before a break is forced */
double base_sigma=(double)12.0, /* comm path length parameters */
    base_rate=(double)1.0; /* for stochastic model, rate of updating */
    /* 0.0=never updated, 0.5=50% of time, 1.0=always updated, etc */

/* transfer function parameters */
float sg=(float)5.0,tau=(float)4.0,tau2=(float)(NUM_FLD/4);

/* A neurons output state is coded from [-1,+1] to [0..QMULT] */
#define QMULT 254
typedef unsigned char quant;

node
{ float weight; int len,max;
  quant tap,*input,*delay;
} delay_synapse={0.0,0,0,0,,0L};

/* neuron data-structure */
node
{ quant output;
  float oldval,state,*probe;
  delay_synapse input[];
} hop_tree;

/* Partition data-structure */
node
{ BOOL stable;
  hop_tree part[];
  BOOL *reset;
} hop_tree_ds;

node /* i/o stuff */
{ int num,xdim,fld_siz;
  long flda,fldb,ctrl; /* base handles for fields */
} bio_ds;

node
{ bio_ds nio;
  NSLNSLio args;
  BOOL reset;
  int flush,age;
  float output[];
  BOOL *stable[];
} hop_ctrl_ds;

/* Control node, detects when flushing net, or stable */
hop_ctrl_ds hop_ctrl()
  in stable; out output,reset;
{ int nn; BOOL stable=TRUE;
  ++curcc; /* age of present run */
  if($flush) {$reset=TRUE; $age=0; --$flush;}
  else
    {$reset=FALSE;
     for(nn=0;nn<$size.stable;++nn) stable&=inx(BOOL,$stable[nn]);
     if(stable) ++$age;
     nsl_stop=(int)($age>base_age);
    }
}

/* Basic graded hop node, optimised version */
hop_tree_ds hop_part_node()
  in reset; out stable; inout part;
{ float prod,staval; int nn,xx,yy; hop_tree *hp=$part; BOOL stable=TRUE;
  xx=$size.part; yy=hp->size.input;
  for(nn=0;nn<xx;++nn)
     {com_delay(net,hp->input,xx,yy,nn,$node.name); /* simulate comms */
      if(inx(BOOL,$reset)) staval=inf(hp->probe);
      else
        {staval=hp->state;
         if(base_stoch) {if(comm_rndf()>(float)base_rate) goto skip;}

         prod=vec_liprod(&(hp->input->tap),&(hp->input->weight),
			 sizeof(delay_synapse),sizeof(delay_synapse),yy,
			 NULL,NULL,TYPE_USCHAR,TYPE_FLOAT,
			 (float)1.0/(float)QHALF,(float)-1.0);
         
		 staval+=( - staval / tau + prod / tau2 );
        }
      if(staval>(float)1.0) staval=(float)1.0;
      else if(staval<(float)0.0) staval=(float)0.0;
      hp->state=staval;
      hp->output=(quant)((float)(QMULT)/
         ((float)1.0+(float)exp((double)(-sg * (staval-(float)0.5)))));
      skip:
      if(inx(BOOL,$reset)) {stable=FALSE; hp->oldval=(float)0.0;}
      else {stable&=(BOOL)(staval==hp->oldval); hp->oldval=staval;}
      ++hp;
     }
  $stable=stable;
}

#define fld_siz (num_parts*num_nodes)
#define xdim (1+sqrt(2*fld_siz))

/* Partitioned BAM net,
*  num_parts=num partitions, num_nodes = num regular nodes per partition */
net bampart(num_parts,num_nodes,noself,pa,pb,#pats)
  in input; out output;
{ hop_part_node()[num_parts] fielda:,
   [*]\part[0..(num_nodes-1)]\input[0..(fld_siz-1)]=
     fieldb[*]\part[0..(num_nodes-1)],
   [*]\part[0..(num_nodes-1)]\probe=
     hop_ctrl\output[0..(fld_siz-1)],
   [*]\reset=hop_ctrl\reset;
  hop_part_node()[num_parts] fieldb:,
   [*]\part[0..(num_nodes-1)]\input[0..(fld_siz-1)]=
     fielda[*]\part[0..(num_nodes-1)],
   [*]\part[0..(num_nodes-1)]\probe=
     hop_ctrl\output[fld_siz..(2*fld_siz-1)],
   [*]\reset=hop_ctrl\reset;
  hop_ctrl()
    stable[+]=fielda[*]\stable+fieldb[*]\stable;
} =
{ hop_part_node[*]\stable=0,
  hop_part_node[*]\part = {0,0.5,0.0},
  fielda[*]\part[*]\input[*]\weight=
    (float)lhopsum((s_val(c_in(1)))*num_nodes+s_val(c_in(2)),fld_siz+s_val(c_in(3)),
	noself,pa,pb,pats),
  fieldb[*]\part[*]\input[*]\weight=
    (float)lhopsum(fld_siz+(s_val(c_in(1)))*num_nodes+s_val(c_in(2)),s_val(c_in(3)),
	noself,pa,pb,pats),
  hop_ctrl = {{2*fld_siz,xdim,fld_siz,
     a_app(s_node(),..\fielda),a_app(s_node(),..\fieldb),a_app(s_node(),..\hop_ctrl)},,
     TRUE,(int)2*xdim,0,{0.0}}
}

net network()
{ bampart(NUM_PAS,NUM_NOS,0,2.0,-1.0,PATS);
}
